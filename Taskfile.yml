version: "3"

vars:
  CLUSTER_NAME: demo-cluster
  NAMESPACE: nginx-demo

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  setup:
    desc: Setup the demo environment
    cmds:
      - echo "Setting up FluxCD and Flagger demo environment..."
      - task: check-tools

  check-tools:
    desc: Verify required tools are installed
    cmds:
      - kubectl version --client
      - helm version
      - flux version --client
      - k3d version

  cluster:create:
    desc: Create a local Kubernetes cluster using k3d
    cmds:
      - echo "Creating k3d cluster{{":"}} {{.CLUSTER_NAME}}"
      - k3d cluster create --config k3d-config.yaml
      - kubectl cluster-info

  cluster:delete:
    desc: Delete the k3d cluster
    cmds:
      - echo "Deleting k3d cluster{{":"}} {{.CLUSTER_NAME}}"
      - k3d cluster delete {{.CLUSTER_NAME}}

  flux:install:
    desc: Install Flux using the flux operator
    cmds:
      - echo "Installing Flux operator..."
      - helm install flux-operator oci://ghcr.io/controlplaneio-fluxcd/charts/flux-operator --namespace flux-system --create-namespace
      - echo "Waiting for Flux operator to be ready..."
      - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=flux-operator -n flux-system --timeout=300s

  flux:configure:
    desc: Create FluxInstance to configure Flux controllers
    cmds:
      - echo "Creating FluxInstance configuration..."
      - kubectl apply -f cluster-init/flux-instance.yaml
      - echo "Waiting for Flux controllers to be ready..."
      - kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=300s

  flagger:install:
    desc: Install Flagger with Prometheus
    cmds:
      - echo "Installing Flagger..."
      - helm repo add flagger https://flagger.app
      - helm repo update
      - helm upgrade -i flagger flagger/flagger --namespace=ingress-nginx --set meshProvider=nginx --create-namespace --set prometheus.install=true

  demo:setup:
    desc: Setup complete demo environment
    deps: [setup, cluster:create, flux:install, flux:configure, flagger:install]
    cmds:
      - echo "Demo environment setup complete!"
      - echo "Cluster{{":"}} {{.CLUSTER_NAME}}"
      - echo "Flux and Flagger are ready for use"

  demo:suspend:
    desc: Suspend demo-app kustomization for manual deployment updates
    cmds:
      - echo "Suspending demo-app kustomization..."
      - flux suspend kustomization demo-app -n flux-system
      - echo "Kustomization suspended - manual changes can now be applied"

  demo:resume:
    desc: Resume demo-app kustomization
    cmds:
      - echo "Resuming demo-app kustomization..."
      - flux resume kustomization demo-app -n flux-system
      - echo "Kustomization resumed - GitOps reconciliation active"

  demo:update-v1:
    desc: Update deployment to v2 image (requires suspended kustomization)
    cmds:
      - echo "Updating deployment to v1..."
      - kubectl patch deployment nginx-deployment -n {{.NAMESPACE}} -p '{"spec":{"replicas":1,"template":{"spec":{"containers":[{"name":"nginx-container","image":"ghcr.io/riccap/demo-cnd-italy-2025/demo-cnd-italy-nginx:v1"}]}}}}'
      - kubectl scale deployment nginx-deployment -n {{.NAMESPACE}} --replicas=1
      - echo "Deployment updated to v1"

  demo:update-v2:
    desc: Update deployment to v2 image (requires suspended kustomization)
    cmds:
      - echo "Updating deployment to v2..."
      - kubectl patch deployment nginx-deployment -n {{.NAMESPACE}} -p '{"spec":{"template":{"spec":{"containers":[{"name":"nginx-container","image":"ghcr.io/riccap/demo-cnd-italy-2025/demo-cnd-italy-nginx:v2"}]}}}}'
      - kubectl scale deployment nginx-deployment -n {{.NAMESPACE}} --replicas=1
      - echo "Deployment updated to v2"

  demo:canary:
    desc: Demonstrate canary deployment
    cmds:
      - echo "Starting canary deployment demo..."
      - echo "1. Suspending kustomization for manual changes"
      - task: demo:suspend
      - echo "2. Updating deployment to v2 image"
      - task: demo:update-v2
      - echo "3. To Resume kustomization task demo:resume"

  status:
    desc: Check status of demo components
    cmds:
      - echo "=== Cluster Status ==="
      - kubectl cluster-info
      - echo ""
      - echo "=== Flux Status ==="
      - kubectl get pods -n flux-system
      - echo ""
      - echo "=== Flagger Status ==="
      - kubectl get pods -n flagger-system

  clean:
    desc: Clean up demo resources
    cmds:
      - echo "Cleaning up demo resources..."
      - kubectl delete namespace {{.NAMESPACE}} --ignore-not-found=true
      - task: cluster:delete
